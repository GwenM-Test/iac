name: Main Pipeline

on:
  push

permissions:
  contents: read
  packages: read
  statuses: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-ql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
       
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
       
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"


  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep SAST
    needs: 
      - code-ql
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Upgrade pip & install Semgrep
        run: |
          python -m pip install --upgrade pip 
          pip install semgrep

      - name: Run Semgrep
        run: semgrep --config auto --error || true

      - name: Semgrep JSON report
        run: semgrep --config auto --error --json -o semgrep.json || true
      - name: Semgrep SARIF report
        run: semgrep --config auto --error --sarif -o semgrep.sarif || true
      - name: Semgrep JUnit report
        run: semgrep --config auto --error --junit-xml -o semgrep-junit.xml || true

      - name: Upload Semgrep to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        
      - name: Upload Semgrep artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports
          path: |
            semgrep.json
            semgrep.sarif
            semgrep-junit.xml

  trivy-scan:
    permissions:
      contents: read 
      security-events: write 
      actions: read
    name: Trivy SCA
    needs:
      - semgrep
      - code-ql
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Running a scan with a sarif file as an output
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'LOW,MEDIUM,CRITICAL,HIGH'
          
      - name: Running a scan with a json file as an output
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'LOW,MEDIUM,CRITICAL,HIGH'
          
      - name: Save the json vulnerability report to an artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: ./trivy-results.json
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  checkov:
      name: Checkov IaC
      runs-on: ubuntu-latest
      needs:
          - semgrep
          - trivy-scan
          - code-ql
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.GH_TOKEN }}
  
        - name: Run Checkov scan
          uses: bridgecrewio/checkov-action@master
          with:
            directory: .                         
            output_format: sarif
            output_file_path: results/checkov.sarif
            soft_fail: true                      
            download_external_modules: true        
  
        - name: Upload SARIF to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: results/checkov.sarif
 
  gitleaks:
    runs-on: ubuntu-latest
    name: GitLeaks Secret Scan
    if: always()
    needs: 
      - semgrep
      - checkov
      - trivy-scan
      - code-ql
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE_KEY }}

      - name: Upload Gitleaks SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  zap:
    name: ZAP DAST
    runs-on: ubuntu-latest
    if: always() # -- will proceed kahit nag fail si gitleaks
    needs: 
        - semgrep
        - checkov
        - gitleaks
        - trivy-scan
        - code-ql
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: app-under-test:latest
          push: false
          load: true

      - name: Run app container
        run: docker run -d --name aut -p 8080:80 app-under-test:latest

      - name: Wait for app to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/ > /dev/null; then
              echo "App is up."
              exit 0
            fi
            echo "Waiting for app... ($i/60)"
            sleep 2
          done
          echo "App did not start in time."
          docker logs aut || true
          exit 1
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-r zap_report.html -w zap_report.md -J zap_report.json'

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap_report.html
            zap_report.md
            zap_report.json
      - name: Cleanup
        if: always()

        run: docker rm -f aut || true

      
